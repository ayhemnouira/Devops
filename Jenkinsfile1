pipeline {
    agent any

    environment {
        DB_URL = 'jdbc:mysql://db:3306/heuresPlusDB'
        VERSION = "${env.BUILD_ID}"
        DOCKERHUB_USER = 'ayhemnr' // Ton nom d'utilisateur DockerHub
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/ayhemnouira/Devops.git',
                    credentialsId: 'github-credentials'
            }
        }

        stage('Build Backend') {
            steps {
                dir('HeuresPlus') {
                    sh 'mvn clean package -DskipTests'
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }
            }
        }

        stage('Test Backend') {
            steps {
                dir('HeuresPlus') {
                    sh 'mvn test'
                    junit 'target/surefire-reports/**/*.xml'
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('heuresplusfrontend') {
                    sh 'npm install'
                    sh 'npm run build'
                    archiveArtifacts artifacts: 'dist/**/*', fingerprint: true
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds') {
                        // Backend image
                        def backendImage = docker.build("${DOCKERHUB_USER}/heuresplus-backend:${VERSION}", 'HeuresPlus')
                        backendImage.push()
                        backendImage.push('latest')

                        // Frontend image
                        def frontendImage = docker.build("${DOCKERHUB_USER}/heuresplus-frontend:${VERSION}", 'heuresplusfrontend')
                        frontendImage.push()
                        frontendImage.push('latest')
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            when {
                branch 'main'
            }
            steps {
                sshPublisher(
                    publishers: [
                        sshPublisherDesc(
                            configName: 'staging-server',
                            transfers: [
                                sshTransfer(
                                    execCommand: """
                                        docker pull ${DOCKERHUB_USER}/heuresplus-backend:${VERSION}
                                        docker pull ${DOCKERHUB_USER}/heuresplus-frontend:${VERSION}
                                        docker-compose -f docker-compose.yml down
                                        docker-compose -f docker-compose.yml up -d
                                    """
                                )
                            ],
                            usePromotionTimestamp: false
                        )
                    ]
                )
            }
        }

      

        stage('Deploy to Production') {
            when {
                branch 'production'
            }
            steps {
                timeout(time: 15, unit: 'MINUTES') {
                    input message: 'Approuver le déploiement en production?', ok: 'Déployer'
                }
                sshPublisher(
                    publishers: [
                        sshPublisherDesc(
                            configName: 'production-server',
                            transfers: [
                                sshTransfer(
                                    execCommand: """
                                        docker pull ${DOCKERHUB_USER}/heuresplus-backend:${VERSION}
                                        docker pull ${DOCKERHUB_USER}/heuresplus-frontend:${VERSION}
                                        docker-compose -f docker-compose.prod.yml down
                                        docker-compose -f docker-compose.prod.yml up -d
                                    """
                                )
                            ],
                            usePromotionTimestamp: false
                        )
                    ]
                )
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            script {
                echo "✅ Build réussi"
            }
        }
        failure {
            script {
                echo "❌ Build échoué"
            }
        }
    }
}
