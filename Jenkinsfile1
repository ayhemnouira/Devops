pipeline {
    agent any

    environment {
        // Externaliser les configurations sensibles via Jenkins Credentials
        DB_URL = credentials('DB_URL_CREDS')
        VERSION = "${env.BUILD_ID}"
        DOCKERHUB_CREDS = credentials('dockerhub-creds')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    extensions: [],
                    userRemoteConfigs: [[
                        url: 'https://github.com/ayhemnouira/Devops.git',
                        credentialsId: 'github-credentials'
                    ]]
                ])
            }
        }

        stage('Build Backend') {
            steps {
                dir('HeuresPlus') {
                    sh 'mvn clean package -DskipTests'
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }
            }
        }

        stage('Test Backend') {
            steps {
                dir('HeuresPlus') {
                    sh 'mvn test'
                    junit 'target/surefire-reports/**/*.xml'
                    script {
                        try {
                            sh 'mvn sonar:sonar -Dsonar.projectKey=heuresplus-backend'
                        } catch (err) {
                            echo "SonarQube analysis warning: ${err}"
                        }
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('heuresplusfrontend') {
                    sh 'npm install'
                    sh 'npm run build'
                    sh 'npm test || true' // Ne pas faire échouer le build pour les tests frontend
                    archiveArtifacts artifacts: 'dist/**/*', fingerprint: true
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds') {
                        def backendImage = docker.build("${env.DOCKERHUB_CREDS_USR}/heuresplus-backend:${VERSION}", 'HeuresPlus')
                        backendImage.push()
                        backendImage.push('latest')

                        def frontendImage = docker.build("${env.DOCKERHUB_CREDS_USR}/heuresplus-frontend:${VERSION}", 'heuresplusfrontend')
                        frontendImage.push()
                        frontendImage.push('latest')
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            when {
                branch 'main'
            }
            steps {
                sshPublisher(
                    publishers: [
                        sshPublisherDesc(
                            configName: 'staging-server',
                            transfers: [
                                sshTransfer(
                                    execCommand: """
                                        docker pull ${env.DOCKERHUB_CREDS_USR}/heuresplus-backend:${VERSION}
                                        docker pull ${env.DOCKERHUB_CREDS_USR}/heuresplus-frontend:${VERSION}
                                        docker-compose -f docker-compose.staging.yml down
                                        docker-compose -f docker-compose.staging.yml up -d
                                    """
                                )
                            ],
                            usePromotionTimestamp: false,
                            verbose: true
                        )
                    ]
                )
            }
        }

        stage('Approval Production') {
            when {
                branch 'main'
            }
            steps {
                timeout(time: 15, unit: 'MINUTES') {
                    input(
                        message: 'Approuver le déploiement en production?', 
                        ok: 'Déployer',
                        parameters: [
                            choice(
                                name: 'ENVIRONMENT',
                                choices: ['prod'],
                                description: 'Environnement de production'
                            )
                        ]
                    )
                }
            }
        }

        stage('Deploy to Production') {
            when {
                branch 'main'
                beforeAgent true
            }
            steps {
                script {
                    sshPublisher(
                        publishers: [
                            sshPublisherDesc(
                                configName: "${params.ENVIRONMENT}-server",
                                transfers: [
                                    sshTransfer(
                                        execCommand: """
                                            docker pull ${env.DOCKERHUB_CREDS_USR}/heuresplus-backend:${VERSION}
                                            docker pull ${env.DOCKERHUB_CREDS_USR}/heuresplus-frontend:${VERSION}
                                            docker-compose -f docker-compose.prod.yml down
                                            docker-compose -f docker-compose.prod.yml up -d
                                        """
                                    )
                                ],
                                usePromotionTimestamp: false
                            )
                        ]
                    )
                }
            }
        }
    }

    post {
        always {
            cleanWs()
            script {
                // Log simple du résultat
                echo "Build status: ${currentBuild.currentResult}"
            }
        }
        success {
            echo "✅ Build et déploiement réussis"
        }
        failure {
            echo "❌ Échec du build ou du déploiement"
        }
    }
}
