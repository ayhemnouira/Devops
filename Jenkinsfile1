pipeline {
    agent any

    parameters {
        choice(name: 'ENVIRONMENT', choices: ['staging', 'production'], description: 'Choisir l\'environnement de déploiement')
    }

    environment {
        MYSQL_ROOT_PASSWORD = 'Root2000'
        MYSQL_USER = 'admin'
        MYSQL_PASSWORD = 'admin123'
        DB_PORT = '3306'
        BACKEND_PORT = '8080'
        FRONTEND_PORT = '80'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Backend') {
            steps {
                dir('HeuresPlus') {
                    sh 'mvn clean package -DskipTests'
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('heuresplusfrontend') {
                    sh 'npm install'
                    sh 'npm run build'
                    archiveArtifacts artifacts: 'dist/**/*', fingerprint: true
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds') {
                        def backendImage = docker.build("${env.DOCKERHUB_USER}/heuresplus-backend:${env.VERSION}", 'HeuresPlus')
                        backendImage.push()
                        backendImage.push('latest')

                        def frontendImage = docker.build("${env.DOCKERHUB_USER}/heuresplus-frontend:${env.VERSION}", 'heuresplusfrontend')
                        frontendImage.push()
                        frontendImage.push('latest')
                    }
                }
            }
        }

        stage('Deploy to Server') {
            steps {
                script {
                    def environmentName = params.ENVIRONMENT

                    // Définir les variables spécifiques à l'environnement
                    if (environmentName == 'staging') {
                        env.MYSQL_PASSWORD = 'staging_password'
                        env.DB_PORT = '3307'
                        env.BACKEND_PORT = '8081'
                        env.FRONTEND_PORT = '8082'
                    } else if (environmentName == 'production') {
                        env.MYSQL_PASSWORD = 'production_password'
                        env.DB_PORT = '3306'
                        env.BACKEND_PORT = '8080'
                        env.FRONTEND_PORT = '80'
                    }

                    // Déployer avec le fichier docker-compose.yml
                    sh "docker-compose up -d"
                }
            }
        }
    }

    post {
        always {
            script {
                if (env.NODE_NAME != null) {
                    cleanWs()
                }
            }
        }
        success {
            echo "✅ Build et déploiement réussis"
        }
        failure {
            echo "❌ Échec du build ou du déploiement"
        }
    }
}
